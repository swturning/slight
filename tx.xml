<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionLiteral>0.5.17</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <contractDefinition>contract<identifier>SimpleOutGas</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>a</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <identifier>owner</identifier>=<expression>
               <environmentalVariable>msg.sender</environmentalVariable>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>f1</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>c</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <forStatement>for(<expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>i</identifier>=<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </variableDeclaration>
                     </expression>;<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>i</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>;<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>i</identifier>
                           </primaryExpression>
                        </expression>
                        <twoPlusMinusOperator>
                           <incrementOperator>++</incrementOperator>
                        </twoPlusMinusOperator>
                     </expression>)<statement>
                        <block>{<statement>
                              <simpleStatement>
                                 <expressionStatement>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>=<expression>
                                          <expression>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>
                                             <muldivOperator>
                                                <divOperator>/</divOperator>
                                             </muldivOperator>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>c</identifier>
                                                </primaryExpression>
                                             </expression>
                                          </expression>
                                          <muldivOperator>
                                             <mulOperator>*</mulOperator>
                                          </muldivOperator>
                                          <expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>2</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                    </expression>
                                 </expressionStatement>
                              </simpleStatement>;</statement>}</block>
                     </statement>
                  </forStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>f2</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>c</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <forStatement>for(<expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>i</identifier>=<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </variableDeclaration>
                     </expression>;<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>i</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>10</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>;<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>i</identifier>
                           </primaryExpression>
                        </expression>
                        <twoPlusMinusOperator>
                           <incrementOperator>++</incrementOperator>
                        </twoPlusMinusOperator>
                     </expression>)<statement>
                        <block>{<statement>
                              <simpleStatement>
                                 <expressionStatement>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <lvalueOperator>
                                          <plusLvalueOperator>+=</plusLvalueOperator>
                                       </lvalueOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>c</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expressionStatement>
                              </simpleStatement>;</statement>}</block>
                     </statement>
                  </forStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>f3</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <forStatement>for(<expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>i</identifier>=<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </variableDeclaration>
                     </expression>;<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>i</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>;<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>i</identifier>
                           </primaryExpression>
                        </expression>
                        <twoPlusMinusOperator>
                           <incrementOperator>++</incrementOperator>
                        </twoPlusMinusOperator>
                     </expression>)<statement>
                        <block>{<statement>
                              <simpleStatement>
                                 <expressionStatement>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <lvalueOperator>
                                          <plusLvalueOperator>+=</plusLvalueOperator>
                                       </lvalueOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>1</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expressionStatement>
                              </simpleStatement>;</statement>}</block>
                     </statement>
                  </forStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>f4</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>[]</typeName>
                  <storageLocation>calldata</storageLocation>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>require</identifier>
                              </functionName>
                              <callArguments>(<expression>
                                    <expression>
                                       <environmentalVariable>tx.origin</environmentalVariable>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>owner</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</callArguments>
                           </functionCall>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>require</identifier>
                              </functionName>
                              <callArguments>(<expression>
                                    <expression>
                                       <environmentalVariable>tx.origin</environmentalVariable>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <environmentalVariable>msg.sender</environmentalVariable>
                                    </expression>
                                 </expression>)</callArguments>
                           </functionCall>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>=<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>b</identifier>
                                 </primaryExpression>
                              </expression>.length</expression>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>