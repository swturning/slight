<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionOperator>^</versionOperator>
            <versionLiteral>0.4.0</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <contractDefinition>contract<identifier>Reentrancy_bonus</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>private</visibleType>
            <identifier>userBalances</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>bool</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>private</visibleType>
            <identifier>claimedBonus</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>private</visibleType>
            <identifier>rewardsForA</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>withdrawReward</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>recipient</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <simpleStatement>
                     <variableDeclarationStatement>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint</elementaryTypeName>
                           </typeName>
                           <identifier>amountToWithdraw</identifier>=<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>rewardsForA</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>recipient</identifier>
                                 </primaryExpression>
                              </expression>]</expression>
                        </variableDeclaration>
                     </variableDeclarationStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>rewardsForA</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>recipient</identifier>
                                 </primaryExpression>
                              </expression>]</expression>=<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <tupleExpression>(<expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>bool</elementaryTypeName>
                                          </typeName>
                                          <identifier>success</identifier>
                                       </variableDeclaration>
                                    </expression>,)</tupleExpression>
                              </primaryExpression>
                           </expression>=<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>recipient</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>call</identifier>
                                 </functionName>
                                 <value>.value(<expression>
                                       <primaryExpression>
                                          <identifier>amountToWithdraw</identifier>
                                       </primaryExpression>
                                    </expression>)</value>
                                 <callArguments>(<expression>
                                       <primaryExpression>
                                          <stringLiteral></stringLiteral>
                                       </primaryExpression>
                                    </expression>)</callArguments>
                              </functionCall>
                           </expression>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>require</identifier>
                              </functionName>
                              <callArguments>(<expression>
                                    <primaryExpression>
                                       <identifier>success</identifier>
                                    </primaryExpression>
                                 </expression>)</callArguments>
                           </functionCall>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getFirstWithdrawalBonus</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>recipient</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>require</identifier>
                              </functionName>
                              <callArguments>(<expression>!<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>claimedBonus</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>recipient</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>
                                 </expression>)</callArguments>
                           </functionCall>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>rewardsForA</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>recipient</identifier>
                                 </primaryExpression>
                              </expression>]</expression>
                           <lvalueOperator>
                              <plusLvalueOperator>+=</plusLvalueOperator>
                           </lvalueOperator>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>100</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>withdrawReward</identifier>
                              </functionName>
                              <callArguments>(<expression>
                                    <primaryExpression>
                                       <identifier>recipient</identifier>
                                    </primaryExpression>
                                 </expression>)</callArguments>
                           </functionCall>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>
               <statement>
                  <simpleStatement>
                     <expressionStatement>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>claimedBonus</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>recipient</identifier>
                                 </primaryExpression>
                              </expression>]</expression>=<expression>
                              <primaryExpression>
                                 <booleanLiteral>true</booleanLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expressionStatement>
                  </simpleStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>