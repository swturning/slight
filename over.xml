<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionOperator>^</versionOperator>
            <versionLiteral>0.5.12</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <contractDefinition>contract<identifier>IntegerOverflowExample</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>divide</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>c</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <simpleStatement>
                                 <expressionStatement>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>c</identifier>
                                          </primaryExpression>
                                       </expression>=
                                        <expression>
                                          <expression>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>
                                             <muldivOperator>
                                                <divOperator>/</divOperator>
                                             </muldivOperator>
                                             <expression>(
                                                 <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>b</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <muldivOperator>
                                                      <mulOperator>*</mulOperator>
                                                   </muldivOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>c</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>)
                                             </expression>
                                          </expression>
                                          <muldivOperator>
                                             <divOperator>/</divOperator>
                                          </muldivOperator>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>c</identifier>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                    </expression>
                                 </expressionStatement>
                              </simpleStatement>;</statement>
                           <statement>
                              <returnStatement>return<expression>
                                    <primaryExpression>
                                       <identifier>c</identifier>
                                    </primaryExpression>
                                 </expression>
                              </returnStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>